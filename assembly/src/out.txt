diff --git a/assembly/src/event/b128.rs b/assembly/src/event/b128.rs
index dcc1768..7ad2eaf 100644
--- a/assembly/src/event/b128.rs
+++ b/assembly/src/event/b128.rs
@@ -3,8 +3,7 @@ use binius_field::{BinaryField128b, BinaryField16b, BinaryField32b};
 use super::Event;
 use crate::{
     event::BinaryOperation,
-    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables},
-    fire_non_jump_event, ZCrayTrace, G,
+    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables, ZCrayTrace, G},
 };
 
 /// Event for B128_ADD.
diff --git a/assembly/src/event/b32.rs b/assembly/src/event/b32.rs
index 94c9f4f..17172c3 100644
--- a/assembly/src/event/b32.rs
+++ b/assembly/src/event/b32.rs
@@ -2,9 +2,8 @@ use binius_field::{BinaryField16b, BinaryField32b, Field, PackedField};
 
 use super::{BinaryOperation, Event};
 use crate::{
-    execution::InterpreterError, fire_non_jump_event, impl_32b_immediate_binary_operation,
+    execution::{InterpreterError, ZCrayTrace, G}, impl_32b_immediate_binary_operation,
     impl_binary_operation, impl_event_for_binary_operation, impl_immediate_binary_operation,
-    ZCrayTrace, G,
 };
 
 /// Event for XOR.
diff --git a/assembly/src/event/branch.rs b/assembly/src/event/branch.rs
index d3edc0a..e03a017 100644
--- a/assembly/src/event/branch.rs
+++ b/assembly/src/event/branch.rs
@@ -2,8 +2,8 @@ use binius_field::{BinaryField16b, BinaryField32b};
 
 use super::Event;
 use crate::{
-    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables},
-    fire_non_jump_event, ZCrayTrace,
+    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables, ZCrayTrace},
+    fire_non_jump_event,
 };
 
 /// Event for BNZ.
diff --git a/assembly/src/event/call.rs b/assembly/src/event/call.rs
index 20fb04b..90b328b 100644
--- a/assembly/src/event/call.rs
+++ b/assembly/src/event/call.rs
@@ -2,8 +2,7 @@ use binius_field::{BinaryField16b, BinaryField32b};
 
 use crate::{
     event::Event,
-    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables},
-    ZCrayTrace,
+    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables, ZCrayTrace},
 };
 
 /// Event for TAILI.
diff --git a/assembly/src/event/integer_ops.rs b/assembly/src/event/integer_ops.rs
index 2db2648..b664995 100644
--- a/assembly/src/event/integer_ops.rs
+++ b/assembly/src/event/integer_ops.rs
@@ -4,9 +4,9 @@ use num_traits::{ops::overflowing::OverflowingAdd, FromPrimitive, PrimInt};
 use super::BinaryOperation;
 use crate::{
     event::Event,
-    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables},
+    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables, ZCrayTrace},
     fire_non_jump_event, impl_binary_operation, impl_event_for_binary_operation,
-    impl_event_no_interaction_with_state_channel, impl_immediate_binary_operation, ZCrayTrace,
+    impl_event_no_interaction_with_state_channel, impl_immediate_binary_operation,
 };
 
 /// Event for the Add gadgets over the integers.
diff --git a/assembly/src/event/mod.rs b/assembly/src/event/mod.rs
index 07845bf..fd956e8 100644
--- a/assembly/src/event/mod.rs
+++ b/assembly/src/event/mod.rs
@@ -8,8 +8,7 @@ use std::fmt::Debug;
 use binius_field::{BinaryField16b, BinaryField32b};
 
 use crate::{
-    execution::{InterpreterChannels, InterpreterError, InterpreterTables},
-    ZCrayTrace,
+    execution::{InterpreterChannels, InterpreterError, InterpreterTables, ZCrayTrace},
 };
 
 pub(crate) mod b128;
@@ -317,7 +316,7 @@ macro_rules! impl_event_for_binary_operation {
             ) {
                 use $crate::event::{LeftOp, OutputOp, RigthOp};
                 assert_eq!(self.output(), Self::operation(self.left(), self.right()));
-                fire_non_jump_event!(self, channels);
+                $crate::fire_non_jump_event!(self, channels);
             }
         }
     };
diff --git a/assembly/src/event/mv.rs b/assembly/src/event/mv.rs
index 679f2bf..cd15af8 100644
--- a/assembly/src/event/mv.rs
+++ b/assembly/src/event/mv.rs
@@ -2,11 +2,10 @@ use binius_field::{BinaryField16b, BinaryField32b};
 
 use crate::{
     event::Event,
-    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables},
+    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables, ZCrayTrace},
     fire_non_jump_event,
     memory::MemoryError,
     opcodes::Opcode,
-    ZCrayTrace,
 };
 
 #[derive(Debug, Clone)]
diff --git a/assembly/src/event/ret.rs b/assembly/src/event/ret.rs
index f4f4d9f..2422cb5 100644
--- a/assembly/src/event/ret.rs
+++ b/assembly/src/event/ret.rs
@@ -2,8 +2,8 @@ use binius_field::BinaryField32b;
 
 use super::Event;
 use crate::{
-    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables},
-    ZCrayTrace,
+    execution::{Interpreter, InterpreterChannels, InterpreterError, ZCrayTrace, InterpreterTables},
+    
 };
 
 /// Event for RET.
diff --git a/assembly/src/event/sli.rs b/assembly/src/event/sli.rs
index 3fa4aca..0a329a6 100644
--- a/assembly/src/event/sli.rs
+++ b/assembly/src/event/sli.rs
@@ -2,8 +2,8 @@ use binius_field::{BinaryField16b, BinaryField32b, Field};
 
 use crate::{
     event::Event,
-    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables, G},
-    ZCrayTrace,
+    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables, G, ZCrayTrace},
+    
 };
 
 #[derive(Debug, Clone, PartialEq)]
diff --git a/assembly/src/execution/emulator.rs b/assembly/src/execution/emulator.rs
index a93a3fb..7cb76d2 100644
--- a/assembly/src/execution/emulator.rs
+++ b/assembly/src/execution/emulator.rs
@@ -18,17 +18,17 @@ use crate::{
         branch::{BnzEvent, BzEvent},
         call::{TailVEvent, TailiEvent},
         integer_ops::{Add32Event, Add64Event, AddEvent, AddiEvent, MuliEvent},
-        mv::{LDIEvent, MVEventOutput, MVIHEvent, MVInfo, MVKind, MVVLEvent, MVVWEvent},
+        mv::{LDIEvent, MVIHEvent, MVInfo, MVKind, MVVLEvent, MVVWEvent},
         ret::RetEvent,
         sli::{ShiftKind, SliEvent},
         ImmediateBinaryOperation,
         NonImmediateBinaryOperation, // Add the import for RetEvent
     },
     execution::StateChannel,
-    memory::{Memory, MemoryError},
+    memory::{Memory, MemoryError, ProgramRom, ValueRom},
     opcodes::Opcode,
     parser::LabelsFrameSizes,
-    ProgramRom, ValueRom, ZCrayTrace,
+    execution::ZCrayTrace,
 };
 
 pub(crate) const G: BinaryField32b = BinaryField32b::MULTIPLICATIVE_GENERATOR;
diff --git a/assembly/src/execution/trace.rs b/assembly/src/execution/trace.rs
index 190bd14..8086a81 100644
--- a/assembly/src/execution/trace.rs
+++ b/assembly/src/execution/trace.rs
@@ -17,12 +17,11 @@ use crate::{
         mv::{LDIEvent, MVEventOutput, MVIHEvent, MVVLEvent, MVVWEvent},
         ret::RetEvent,
         sli::SliEvent,
-        Event,
+        Event
     },
-    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables},
-    memory::{Memory, MemoryError, VromUpdate},
+    execution::{Interpreter, InterpreterChannels, InterpreterError, InterpreterTables, G},
+    memory::{Memory, MemoryError, VromUpdate, ProgramRom, ValueRom},
     parser::LabelsFrameSizes,
-    ProgramRom, ValueRom, G,
 };
 
 #[derive(Debug, Default)]
diff --git a/assembly/src/main.rs b/assembly/src/main.rs
deleted file mode 100644
index 57b29cb..0000000
--- a/assembly/src/main.rs
+++ /dev/null
@@ -1,192 +0,0 @@
-// TODO: Remove these once stable enough
-#![allow(unused)]
-#![allow(dead_code)]
-
-// TODO: Add doc
-
-mod event;
-mod execution;
-mod memory;
-mod opcodes;
-mod parser;
-mod util;
-
-use std::collections::HashMap;
-
-use binius_field::{BinaryField16b, BinaryField32b, ExtensionField, Field, PackedField};
-use execution::ZCrayTrace;
-use execution::{Instruction, InterpreterInstruction, G};
-use memory::{Memory, ProgramRom, ValueRom};
-use opcodes::Opcode;
-use parser::get_full_prom_and_labels;
-use parser::parse_program;
-use util::get_binary_slot;
-
-pub(crate) fn code_to_prom(
-    code: &[Instruction],
-    is_calling_procedure_hints: &[bool],
-) -> ProgramRom {
-    let mut prom = ProgramRom::new();
-    // TODO: type-gate field_pc and use some `incr()` method to abstract away `+1` /
-    // `*G`.
-    let mut pc = BinaryField32b::ONE; // we start at PC = 1G.
-    for (i, &instruction) in code.iter().enumerate() {
-        let interp_inst =
-            InterpreterInstruction::new(instruction, pc, is_calling_procedure_hints[i]);
-        prom.push(interp_inst);
-        pc *= G;
-    }
-
-    prom
-}
-
-fn main() {
-    let collatz = BinaryField16b::ONE;
-    let case_recurse =
-        ExtensionField::<BinaryField16b>::iter_bases(&G.pow(4)).collect::<Vec<BinaryField16b>>();
-    let case_odd =
-        ExtensionField::<BinaryField16b>::iter_bases(&G.pow(10)).collect::<Vec<BinaryField16b>>();
-
-    let instructions = parse_program(include_str!("../../examples/collatz.asm")).unwrap();
-
-    // Sets the call procedure hints to true for the returned PROM (where
-    // instructions are given with the labels).
-    let mut is_call_procedure_hints_with_labels = vec![false; instructions.len()];
-    let indices_to_set_with_labels = vec![9, 10, 11, 15, 16, 17];
-    for idx in indices_to_set_with_labels {
-        is_call_procedure_hints_with_labels[idx] = true;
-    }
-    let (prom, labels, pc_field_to_int) =
-        get_full_prom_and_labels(&instructions, &is_call_procedure_hints_with_labels)
-            .expect("Instructions were not formatted properly.");
-
-    let zero = BinaryField16b::zero();
-
-    let expected_prom = vec![
-        // collatz:
-        [
-            Opcode::Xori.get_field_elt(),
-            get_binary_slot(5),
-            get_binary_slot(2),
-            get_binary_slot(1),
-        ], //  0G: XORI 5 2 1
-        [
-            Opcode::Bnz.get_field_elt(),
-            get_binary_slot(5),
-            case_recurse[0],
-            case_recurse[1],
-        ], //  1G: BNZ 5 case_recurse
-        // case_return:
-        [
-            Opcode::Xori.get_field_elt(),
-            get_binary_slot(3),
-            get_binary_slot(2),
-            zero,
-        ], //  2G: XORI 3 2 zero
-        [Opcode::Ret.get_field_elt(), zero, zero, zero], //  3G: RET
-        // case_recurse:
-        [
-            Opcode::Andi.get_field_elt(),
-            get_binary_slot(6),
-            get_binary_slot(2),
-            get_binary_slot(1),
-        ], // 4G: ANDI 6 2 1
-        [
-            Opcode::Bnz.get_field_elt(),
-            get_binary_slot(6),
-            case_odd[0],
-            case_odd[1],
-        ], //  5G: BNZ 6 case_odd
-        // case_even:
-        [
-            Opcode::Srli.get_field_elt(),
-            get_binary_slot(8),
-            get_binary_slot(2),
-            get_binary_slot(1),
-        ], //  6G: SRLI 8 2 1
-        [
-            Opcode::MVVW.get_field_elt(),
-            get_binary_slot(4),
-            get_binary_slot(2),
-            get_binary_slot(8),
-        ], //  7G: MVV.W @4[2], @8
-        [
-            Opcode::MVVW.get_field_elt(),
-            get_binary_slot(4),
-            get_binary_slot(3),
-            get_binary_slot(3),
-        ], //  8G: MVV.W @4[3], @3
-        [
-            Opcode::Taili.get_field_elt(),
-            collatz,
-            zero,
-            get_binary_slot(4),
-        ], // 9G: TAILI collatz 4
-        // case_odd:
-        [
-            Opcode::Muli.get_field_elt(),
-            get_binary_slot(7),
-            get_binary_slot(2),
-            get_binary_slot(3),
-        ], //  10G: MULI 7 2 3
-        [
-            Opcode::Addi.get_field_elt(),
-            get_binary_slot(8),
-            get_binary_slot(7),
-            get_binary_slot(1),
-        ], //  11G: ADDI 8 7 1
-        [
-            Opcode::MVVW.get_field_elt(),
-            get_binary_slot(4),
-            get_binary_slot(2),
-            get_binary_slot(8),
-        ], //  12G: MVV.W @4[2], @8
-        [
-            Opcode::MVVW.get_field_elt(),
-            get_binary_slot(4),
-            get_binary_slot(3),
-            get_binary_slot(3),
-        ], //  13G: MVV.W @4[3], @3
-        [
-            Opcode::Taili.get_field_elt(),
-            collatz,
-            zero,
-            get_binary_slot(4),
-        ], //  14G: TAILI collatz 4
-    ];
-
-    // Sets the call procedure hints to true for the expected PROM (where
-    // instructions are given without the labels).
-    let mut is_call_procedure_hints = vec![false; instructions.len()];
-    let indices_to_set = vec![7, 8, 9, 12, 13, 14];
-    for idx in indices_to_set {
-        is_call_procedure_hints[idx] = true;
-    }
-    let expected_prom = code_to_prom(&expected_prom, &is_call_procedure_hints);
-
-    assert!(
-        prom.len() == expected_prom.len(),
-        "Not identical number of instructions in PROM ({:?}) and expected PROM ({:?})",
-        prom.len(),
-        expected_prom.len()
-    );
-
-    for (i, inst) in prom.iter().enumerate() {
-        let expected_inst = &expected_prom[i];
-        assert_eq!(
-            *inst, *expected_inst,
-            "Value for index {:?} in PROM is {:?} but is {:?} in expected PROM",
-            i, inst, expected_inst
-        );
-    }
-
-    let mut frame_sizes = HashMap::new();
-    frame_sizes.insert(BinaryField32b::ONE, 9);
-    let initial_value = 3999;
-    let vrom = ValueRom::new_with_init_vals(&[0, 0, initial_value]);
-
-    let memory = Memory::new(prom, vrom);
-
-    let _ = ZCrayTrace::generate(memory, frame_sizes, pc_field_to_int)
-        .expect("Trace generation should not fail.");
-}
diff --git a/assembly/src/memory/mod.rs b/assembly/src/memory/mod.rs
index 6a00090..38a2831 100644
--- a/assembly/src/memory/mod.rs
+++ b/assembly/src/memory/mod.rs
@@ -4,7 +4,7 @@ mod vrom_allocator;
 pub(crate) use vrom::{ValueRom, VromPendingUpdates, VromUpdate};
 pub(crate) use vrom_allocator::VromAllocator;
 
-use crate::InterpreterInstruction;
+use crate::execution::InterpreterInstruction;
 
 #[allow(clippy::enum_variant_names)]
 #[derive(Debug)]
diff --git a/assembly/src/memory/vrom.rs b/assembly/src/memory/vrom.rs
index 378bb86..9a35f73 100644
--- a/assembly/src/memory/vrom.rs
+++ b/assembly/src/memory/vrom.rs
@@ -4,8 +4,9 @@ use binius_field::{BinaryField16b, BinaryField32b};
 
 use super::MemoryError;
 use crate::{
-    event::mv::MVEventOutput, execution::InterpreterError, memory::vrom_allocator::VromAllocator,
-    opcodes::Opcode, ZCrayTrace,
+    memory::vrom_allocator::VromAllocator,
+    opcodes::Opcode,
+    execution::ZCrayTrace,
 };
 
 pub(crate) type VromPendingUpdates = HashMap<u32, Vec<VromUpdate>>;
diff --git a/assembly/src/parser/instructions_with_labels.rs b/assembly/src/parser/instructions_with_labels.rs
index 5ad9805..964cc92 100644
--- a/assembly/src/parser/instructions_with_labels.rs
+++ b/assembly/src/parser/instructions_with_labels.rs
@@ -4,7 +4,8 @@ use binius_field::{BinaryField16b, BinaryField32b, ExtensionField, Field, Packed
 use thiserror::Error;
 
 use super::instruction_args::{Immediate, Slot, SlotWithOffset};
-use crate::{execution::InterpreterInstruction, opcodes::Opcode, ProgramRom, G};
+use crate::{execution::InterpreterInstruction, opcodes::Opcode, execution::G};
+use crate::memory::ProgramRom;
 
 /// This is an incomplete list of instructions
 /// So far, only the ones added for parsing the fibonacci example has been added
